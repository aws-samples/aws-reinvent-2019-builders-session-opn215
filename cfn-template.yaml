AWSTemplateFormatVersion: 2010-09-09
# Added a comment for the first time.

Parameters:

  VPC1CidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: Enter a CIDR range for the VPC.

  SN1CidrBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: Enter a CIDR range for the VPC.

  SN2CidrBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: Enter a CIDR range for the VPC.
  
  LinuxImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  FireHoseS3BufferSize:
    Type: Number
    Default: 5
    Description: Enter the buffer size in MB for the Kinesis Firehose destination bucket.

  FireHoseS3BufferTime:
    Type: Number
    Default: 300
    Description: Enter the buffer time in seconds for the Kinesis Firehose destination bucket.

Mappings: {}

Conditions: {}

Outputs: {}

Resources:

  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: !Ref VPC1CidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  
  SN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Ref SN1CidrBlock

  SN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Ref SN2CidrBlock

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC1
  
  EIP:
   DependsOn: InternetGatewayAttachment
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref SN2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
  
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SN2
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
  
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SN1

  SnortSensor:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - SubnetId: !Ref SN1
          DeviceIndex: 0
          GroupSet: 
            - !Ref SG1
      InstanceType: t2.medium
      ImageId: !Ref LinuxImageId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
      Tags: 
        - 
          Key: "Name"
          Value: "SnortSensor"
        - 
          Key: "SSMType"
          Value: "SnortSensor"
        - 
          Key: "SSMManaged"
          Value: "True"
      IamInstanceProfile: !Ref SSMInstanceProfile

  TrafficGenerator:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - SubnetId: !Ref SN1
          DeviceIndex: 0
          GroupSet: 
            - !Ref SG1
      InstanceType: t2.medium
      ImageId: !Ref LinuxImageId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
      Tags: 
        - 
          Key: "Name"
          Value: "TrafficGenerator"
        - 
          Key: "SSMType"
          Value: "TrafficGenerator"
        - 
          Key: "SSMManaged"
          Value: "True"
      IamInstanceProfile: !Ref SSMInstanceProfile

  SnortPacketData:
    Type: 'AWS::S3::Bucket'
    Properties: {}

  SnortAlertData:
    Type: 'AWS::S3::Bucket'
    Properties: {}

  SnortPacketStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: aws-snort-demo-SnortPacketStream
      S3DestinationConfiguration: 
        BucketARN: !GetAtt SnortPacketData.Arn
        BufferingHints: 
          IntervalInSeconds: !Ref FireHoseS3BufferTime
          SizeInMBs: !Ref FireHoseS3BufferSize
        CompressionFormat: GZIP
        RoleARN: !GetAtt KinesisIAMRole.Arn

  SnortAlertStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: aws-snort-demo-SnortAlertStream
      S3DestinationConfiguration: 
        BucketARN: !GetAtt SnortAlertData.Arn
        BufferingHints: 
          IntervalInSeconds: !Ref FireHoseS3BufferTime
          SizeInMBs: !Ref FireHoseS3BufferSize
        CompressionFormat: GZIP
        RoleARN: !GetAtt KinesisIAMRole.Arn
  
  KinesisIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
  
  KinesisIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aws-snort-demo-kinesis-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SnortPacketData
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SnortPacketData
                  - '*'
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SnortAlertData
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SnortAlertData
                  - '*'
      Roles:
        - !Ref KinesisIAMRole
  
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: SSMInstanceProfile
      Roles: 
        - !Ref SSMInstanceRole
  
  SSMInstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess
        - arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForImageBuilder

  SSMEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: 'true'
      SecurityGroupIds: 
        - !Ref SG1
      ServiceName: 
        !Join
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssm'
      SubnetIds: 
        - !Ref SN1
      VpcId: !Ref VPC1
      VpcEndpointType: Interface
  
  SSMMessagesEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: 'true'
      SecurityGroupIds: 
        - !Ref SG1
      ServiceName: 
        !Join
          - ''
          - - 'com.amazonaws.'
            - !Ref 'AWS::Region'
            - '.ssmmessages'
      SubnetIds: 
        - !Ref SN1
      VpcId: !Ref VPC1
      VpcEndpointType: Interface

  EC2MessagesEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: 'true'
      SecurityGroupIds: 
        - !Ref SG1
      ServiceName: 
        !Join
          - ''
          - - 'com.amazonaws.'
            - !Ref 'AWS::Region'
            - '.ec2messages'
      SubnetIds: 
        - !Ref SN1
      VpcId: !Ref VPC1
      VpcEndpointType: Interface

  EC2EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: 'true'
      SecurityGroupIds: 
        - !Ref SG1
      ServiceName: 
        !Join
          - ''
          - - 'com.amazonaws.'
            - !Ref 'AWS::Region'
            - '.ec2'
      SubnetIds: 
        - !Ref SN1
      VpcId: !Ref VPC1
      VpcEndpointType: Interface

  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all
      VpcId: !Ref VPC1
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
  
  SSMLoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}

  AthenaQueryResultsBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}

  SnortInstall:
    Type: 'AWS::SSM::Document'
    Properties:
      DocumentType: Automation
      Content:
        description: >-
          # SnortInstallAndConfigure

          This document sets up the EPEL repo and installs the Snort rpm's.  It then
          moves on to download and deploy the community rules.
        schemaVersion: '0.3'
        parameters:
          InstanceId: 
            type: StringList
        mainSteps:
          - name: InstallEPELRepo
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                commands: >-
                  sudo yum install -y
                  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            description: Install the EPEL repo from remote location.
            onFailure: Continue
          - name: InstallDAQrpm
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                commands: >-
                  sudo yum install -y
                  https://www.snort.org/downloads/archive/snort/daq-2.0.6-1.f21.x86_64.rpm
            description: Installs the DAQ from the remote location.
            onFailure: Continue
          - name: InstallSnortrpm
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                commands: >-
                  sudo yum install -y
                  https://www.snort.org/downloads/archive/snort/snort-openappid-2.9.9.0-1.f21.x86_64.rpm
            description: Installs the snort rpm
            onFailure: Continue
          - name: InstallCommunityRules
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - >-
                    sudo wget -nv
                    https://www.snort.org/downloads/community/community-rules.tar.gz -O
                    /var/tmp/community-rules.tar.gz
                  - sudo gunzip -f /var/tmp/community-rules.tar.gz
                  - sudo tar -C /var/tmp -xvf /var/tmp/community-rules.tar
                  - sudo cp /var/tmp/community-rules/* /etc/snort/rules/
              InstanceIds:
                - '{{InstanceId}}'
            description: Installs the community rules package.
            onFailure: Continue
          - name: CreateDirectories
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - >-
                    sudo mkdir /usr/local/lib/snort_dynamicrules
                  - sudo chown -R snort:snort /usr/local/lib/snort_dynamicrules
                  - sudo chmod 2775 /var/log/snort
                  - sudo chmod u+s /var/log/snort
              InstanceIds:
                - '{{InstanceId}}'
            description: Sets directory permissions and create directories.
            onFailure: Continue

  SnortConfigure:
    Type: 'AWS::SSM::Document'
    Properties:
      DocumentType: Automation
      Content:
        description: >-
          # SnortInstallAndConfigure

          This document sets up all the custom configuration for snort.  It pulls the files from GitHub.
        schemaVersion: '0.3'
        parameters:
          InstanceId: 
            type: StringList
        mainSteps:
          - name: ConfigureSnort
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                commands: 
                  - >-
                    sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/rc.d/init.d/snortd /etc/rc.d/init.d/snortd
                  - sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/snort/snort.conf /etc/snort/snort.conf
                  - sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/sysconfig/snort /etc/sysconfig/snort
                  - sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/snort/rules/local.rules /etc/snort/rules/local.rules
                  - sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/snort/rules/white_list.rules /etc/snort/rules/white_list.rules
                  - sudo cp /home/ssm-user/aws-reinvent-2019-builders-session-opn215/etc/snort/rules/black_list.rules /etc/snort/rules/black_list.rules
            description: Update all the Snort configuration files from GitHub repo.
            onFailure: Continue